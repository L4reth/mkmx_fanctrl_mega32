
mkmx_mega32_fanctrl_feedback.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000061e  000006b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000078  0080006c  0080006c  000006be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001454  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2b  00000000  00000000  000026a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b1  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e02  00000000  00000000  00003ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000048e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_5>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_6>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_13>
  38:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_14>
  3c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__vector_15>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	c1 01       	movw	r24, r2
  56:	c8 01       	movw	r24, r16
  58:	d1 01       	movw	r26, r2
  5a:	d9 01       	movw	r26, r18
  5c:	e1 01       	movw	r28, r2
  5e:	ef 01       	movw	r28, r30
  60:	03 02       	muls	r16, r19

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ee e1       	ldi	r30, 0x1E	; 30
  76:	f6 e0       	ldi	r31, 0x06	; 6
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	ac 36       	cpi	r26, 0x6C	; 108
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	ac e6       	ldi	r26, 0x6C	; 108
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a4 3e       	cpi	r26, 0xE4	; 228
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  98:	0c 94 0d 03 	jmp	0x61a	; 0x61a <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <__vector_6>:
volatile uint8_t u8DeviceAdres = 0;

volatile uint8_t szybkosc = 0;

ISR(TIMER1_CAPT_vect) //measuring speed interrupt
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	u16CounterDiff = (TCNT1 - u16TmpDiff);
  b2:	8c b5       	in	r24, 0x2c	; 44
  b4:	9d b5       	in	r25, 0x2d	; 45
  b6:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <u16TmpDiff>
  ba:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <u16TmpDiff+0x1>
  be:	82 1b       	sub	r24, r18
  c0:	93 0b       	sbc	r25, r19
  c2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	u16TmpDiff = TCNT1;
  ca:	8c b5       	in	r24, 0x2c	; 44
  cc:	9d b5       	in	r25, 0x2d	; 45
  ce:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <u16TmpDiff+0x1>
  d2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <u16TmpDiff>
	
	TCCR1B ^= (1<<ICES1);
  d6:	9e b5       	in	r25, 0x2e	; 46
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	89 27       	eor	r24, r25
  dc:	8e bd       	out	0x2e, r24	; 46
	
	if(u16CounterDiff > 700)
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  e6:	8d 3b       	cpi	r24, 0xBD	; 189
  e8:	92 40       	sbci	r25, 0x02	; 2
  ea:	40 f0       	brcs	.+16     	; 0xfc <__vector_6+0x5c>
	{
		u16Period = u16CounterDiff;
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  f0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  f4:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <u16Period+0x1>
  f8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <u16Period>
	}	
	u8ICPCounter++;
  fc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <u8ICPCounter>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <u8ICPCounter>
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_5>:

ISR(TIMER2_OVF_vect) //Detecting fan stop interrupt 
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
	u8IntCounter++;
 124:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8IntCounter>
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <u8IntCounter>
	if(u8IntCounter == 20) //additional prescaler 
 12e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8IntCounter>
 132:	84 31       	cpi	r24, 0x14	; 20
 134:	71 f4       	brne	.+28     	; 0x152 <__vector_5+0x3a>
	{
		if(u8ICPCounter == 0)
 136:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <u8ICPCounter>
 13a:	81 11       	cpse	r24, r1
 13c:	04 c0       	rjmp	.+8      	; 0x146 <__vector_5+0x2e>
		{
			u8stopFlag = 1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <u8stopFlag>
 144:	02 c0       	rjmp	.+4      	; 0x14a <__vector_5+0x32>
		}
		else
		u8stopFlag = 0;
 146:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <u8stopFlag>
		u8ICPCounter = 0;
 14a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <u8ICPCounter>
		
		//uart_putc(0x55); //debuging
		u8IntCounter = 0;
 14e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <u8IntCounter>
	}
}
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <main>:

int main(void)
{
    /* I/O ports settings */
		   //76543210 pin numbers 1-output
	DDRA = 0b00000000; //Dedicated for adress pins
 15e:	1a ba       	out	0x1a, r1	; 26
// 	DDRB = 0b
// 	DDRC = 0b
	DDRD |= (1<<DDD6); //input capture pin
 160:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1<<DDD5); //pwm output pin
 162:	8d 9a       	sbi	0x11, 5	; 17
	
	/* PWM module config */ //fast pwm, presc. =8
	TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|	(1<<CS01);
 164:	83 b7       	in	r24, 0x33	; 51
 166:	8a 66       	ori	r24, 0x6A	; 106
 168:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0; //full speed
 16a:	1c be       	out	0x3c, r1	; 60
	
	/* Input capture config */
	TCCR1A = 0x00;
 16c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1<<ICNC1)|(1<<ICES1)|(1<<CS12);
 16e:	8e b5       	in	r24, 0x2e	; 46
 170:	84 6c       	ori	r24, 0xC4	; 196
 172:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<TICIE1);
 174:	89 b7       	in	r24, 0x39	; 57
 176:	80 62       	ori	r24, 0x20	; 32
 178:	89 bf       	out	0x39, r24	; 57
	
	/* Stop detecting config */ //8 bitów zamiast 16!!!!!
	TCCR2 |= (1<<CS02)|(1<<CS01)|(1<<CS00); //free runing, presc = 1024
 17a:	85 b5       	in	r24, 0x25	; 37
 17c:	87 60       	ori	r24, 0x07	; 7
 17e:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<TOV2);										//overflow 30/sec
 180:	89 b7       	in	r24, 0x39	; 57
 182:	80 64       	ori	r24, 0x40	; 64
 184:	89 bf       	out	0x39, r24	; 57
	
	/* USART config */
	Protocolinit();
 186:	0e 94 33 01 	call	0x266	; 0x266 <Protocolinit>
	
	/* Enabling global interrupts */
	sei();
 18a:	78 94       	sei
	
	/* Infinite loop */
    while (1) 
    {
		//u16LastRPM = SpeedRetrun(u16Period, u8stopFlag);
		u16LastRPM = 1956;
 18c:	c4 ea       	ldi	r28, 0xA4	; 164
 18e:	d7 e0       	ldi	r29, 0x07	; 7
 190:	d0 93 6e 00 	sts	0x006E, r29	; 0x80006e <u16LastRPM+0x1>
 194:	c0 93 6d 00 	sts	0x006D, r28	; 0x80006d <u16LastRPM>
		ParseData();		
 198:	0e 94 ab 01 	call	0x356	; 0x356 <ParseData>
 19c:	f9 cf       	rjmp	.-14     	; 0x190 <main+0x32>

0000019e <CalcCRC>:
// 	}
// 	// 	else
// 	// 	u8Devadrr = 0;
// 
 	return u8Devadrr;
}
 19e:	fc 01       	movw	r30, r24
 1a0:	61 15       	cp	r22, r1
 1a2:	71 05       	cpc	r23, r1
 1a4:	b9 f0       	breq	.+46     	; 0x1d4 <CalcCRC+0x36>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	df 01       	movw	r26, r30
 1b0:	a2 0f       	add	r26, r18
 1b2:	b3 1f       	adc	r27, r19
 1b4:	9c 91       	ld	r25, X
 1b6:	89 27       	eor	r24, r25
 1b8:	98 e0       	ldi	r25, 0x08	; 8
 1ba:	27 e0       	ldi	r18, 0x07	; 7
 1bc:	88 0f       	add	r24, r24
 1be:	08 f4       	brcc	.+2      	; 0x1c2 <CalcCRC+0x24>
 1c0:	82 27       	eor	r24, r18
 1c2:	9a 95       	dec	r25
 1c4:	d9 f7       	brne	.-10     	; 0x1bc <CalcCRC+0x1e>
 1c6:	4f 5f       	subi	r20, 0xFF	; 255
 1c8:	24 2f       	mov	r18, r20
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	26 17       	cp	r18, r22
 1ce:	37 07       	cpc	r19, r23
 1d0:	70 f3       	brcs	.-36     	; 0x1ae <CalcCRC+0x10>
 1d2:	08 95       	ret
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	08 95       	ret

000001d8 <SendData>:
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	66 97       	sbiw	r28, 0x16	; 22
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	89 01       	movw	r16, r18
 1f2:	9a e5       	ldi	r25, 0x5A	; 90
 1f4:	99 83       	std	Y+1, r25	; 0x01
 1f6:	95 ea       	ldi	r25, 0xA5	; 165
 1f8:	9a 83       	std	Y+2, r25	; 0x02
 1fa:	8b 83       	std	Y+3, r24	; 0x03
 1fc:	6c 83       	std	Y+4, r22	; 0x04
 1fe:	2d 83       	std	Y+5, r18	; 0x05
 200:	23 2b       	or	r18, r19
 202:	a1 f0       	breq	.+40     	; 0x22c <SendData+0x54>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	e6 e0       	ldi	r30, 0x06	; 6
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ec 0f       	add	r30, r28
 210:	fd 1f       	adc	r31, r29
 212:	e2 0f       	add	r30, r18
 214:	f1 1d       	adc	r31, r1
 216:	da 01       	movw	r26, r20
 218:	a8 0f       	add	r26, r24
 21a:	b9 1f       	adc	r27, r25
 21c:	8c 91       	ld	r24, X
 21e:	80 83       	st	Z, r24
 220:	2f 5f       	subi	r18, 0xFF	; 255
 222:	82 2f       	mov	r24, r18
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	80 17       	cp	r24, r16
 228:	91 07       	cpc	r25, r17
 22a:	78 f3       	brcs	.-34     	; 0x20a <SendData+0x32>
 22c:	b8 01       	movw	r22, r16
 22e:	6d 5f       	subi	r22, 0xFD	; 253
 230:	7f 4f       	sbci	r23, 0xFF	; 255
 232:	ce 01       	movw	r24, r28
 234:	03 96       	adiw	r24, 0x03	; 3
 236:	0e 94 cf 00 	call	0x19e	; 0x19e <CalcCRC>
 23a:	fe 01       	movw	r30, r28
 23c:	e0 0f       	add	r30, r16
 23e:	f1 1f       	adc	r31, r17
 240:	86 83       	std	Z+6, r24	; 0x06
 242:	b8 01       	movw	r22, r16
 244:	6a 5f       	subi	r22, 0xFA	; 250
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	ce 01       	movw	r24, r28
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	0e 94 bc 02 	call	0x578	; 0x578 <uart_putdata>
 250:	66 96       	adiw	r28, 0x16	; 22
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <Protocolinit>:
	}
}

void Protocolinit(void)
{
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
 266:	87 e6       	ldi	r24, 0x67	; 103
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 76 02 	call	0x4ec	; 0x4ec <uart_init>
 26e:	08 95       	ret

00000270 <ParseFrame>:
	//DDRA |= (1<<DDA4); //direction pin set as output
}

void ParseFrame(void)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	28 97       	sbiw	r28, 0x08	; 8
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
	if(sFrame.u8Addr == ADRR)	 //sprawdzanie warunku naszwego adrsu
 284:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <sFrame>
 288:	8a 30       	cpi	r24, 0x0A	; 10
 28a:	09 f0       	breq	.+2      	; 0x28e <ParseFrame+0x1e>
 28c:	5b c0       	rjmp	.+182    	; 0x344 <ParseFrame+0xd4>
	{
		switch(sFrame.u8Cmd)
 28e:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <sFrame+0x1>
 292:	83 30       	cpi	r24, 0x03	; 3
 294:	21 f1       	breq	.+72     	; 0x2de <ParseFrame+0x6e>
 296:	28 f4       	brcc	.+10     	; 0x2a2 <ParseFrame+0x32>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	49 f0       	breq	.+18     	; 0x2ae <ParseFrame+0x3e>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	d1 f0       	breq	.+52     	; 0x2d4 <ParseFrame+0x64>
 2a0:	51 c0       	rjmp	.+162    	; 0x344 <ParseFrame+0xd4>
 2a2:	84 30       	cpi	r24, 0x04	; 4
 2a4:	81 f1       	breq	.+96     	; 0x306 <ParseFrame+0x96>
 2a6:	85 30       	cpi	r24, 0x05	; 5
 2a8:	09 f4       	brne	.+2      	; 0x2ac <ParseFrame+0x3c>
 2aa:	41 c0       	rjmp	.+130    	; 0x32e <ParseFrame+0xbe>
 2ac:	4b c0       	rjmp	.+150    	; 0x344 <ParseFrame+0xd4>
		{
			//komendy steruj¹ce wiatakiem
			case PING:			//0x01
			{
				uint8_t u8DataTab[8] = "Fan_ctrl";
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	e2 e6       	ldi	r30, 0x62	; 98
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	de 01       	movw	r26, r28
 2b6:	11 96       	adiw	r26, 0x01	; 1
 2b8:	01 90       	ld	r0, Z+
 2ba:	0d 92       	st	X+, r0
 2bc:	8a 95       	dec	r24
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <ParseFrame+0x48>
				SendData(0x00, 't', u8DataTab, 8);
 2c0:	28 e0       	ldi	r18, 0x08	; 8
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	ae 01       	movw	r20, r28
 2c6:	4f 5f       	subi	r20, 0xFF	; 255
 2c8:	5f 4f       	sbci	r21, 0xFF	; 255
 2ca:	64 e7       	ldi	r22, 0x74	; 116
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SendData>
			}
			break;
 2d2:	38 c0       	rjmp	.+112    	; 0x344 <ParseFrame+0xd4>
			
			case SET_SPEED:		//0x02
			{
				//u16SetRPM  = (sFrame.u8Payload[0] << 8) + sFrame.u8Payload[1];
				szybkosc = sFrame.u8Payload[0];
 2d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <sFrame+0x3>
 2d8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			}
			break;
 2dc:	33 c0       	rjmp	.+102    	; 0x344 <ParseFrame+0xd4>
			
			case RETURN_SPEED_HEX:	//0x03
			{
				uint8_t u8SpeedTab[2];
				// 0 - older bit, 1 - younger bit of RPM
				u8SpeedTab[0] = ((u16LastRPM & 0xFF00) >> 8);
 2de:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u16LastRPM>
 2e2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u16LastRPM+0x1>
 2e6:	99 83       	std	Y+1, r25	; 0x01
				u8SpeedTab[1] = (u16LastRPM & 0x00FF);
 2e8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u16LastRPM>
 2ec:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u16LastRPM+0x1>
 2f0:	8a 83       	std	Y+2, r24	; 0x02
				SendData(0x00, 't', u8SpeedTab, 0x02);
 2f2:	22 e0       	ldi	r18, 0x02	; 2
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	ae 01       	movw	r20, r28
 2f8:	4f 5f       	subi	r20, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	64 e7       	ldi	r22, 0x74	; 116
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SendData>
				// adr, cmd, payload, pl-len
			}
			break;
 304:	1f c0       	rjmp	.+62     	; 0x344 <ParseFrame+0xd4>
			
			case RETURN_SPEED_ASCII: //0x04
			{
				uint8_t u8SpeedTab[5];
				itoa(u16LastRPM,u8SpeedTab,10);				
 306:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <u16LastRPM>
 30a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <u16LastRPM+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	be 01       	movw	r22, r28
 312:	6f 5f       	subi	r22, 0xFF	; 255
 314:	7f 4f       	sbci	r23, 0xFF	; 255
 316:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__itoa_ncheck>
				SendData(0x00, 't', u8SpeedTab, 5);				
 31a:	25 e0       	ldi	r18, 0x05	; 5
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	ae 01       	movw	r20, r28
 320:	4f 5f       	subi	r20, 0xFF	; 255
 322:	5f 4f       	sbci	r21, 0xFF	; 255
 324:	64 e7       	ldi	r22, 0x74	; 116
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SendData>
			}
			break;
 32c:	0b c0       	rjmp	.+22     	; 0x344 <ParseFrame+0xd4>
			
			case RETURN_OCR:	//0x05
			{
				uint8_t u8DataTab[1] = {OCR0};
 32e:	8c b7       	in	r24, 0x3c	; 60
 330:	89 83       	std	Y+1, r24	; 0x01
				SendData(0x00, 't', u8DataTab, 0x01);		
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	ae 01       	movw	r20, r28
 338:	4f 5f       	subi	r20, 0xFF	; 255
 33a:	5f 4f       	sbci	r21, 0xFF	; 255
 33c:	64 e7       	ldi	r22, 0x74	; 116
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SendData>
			
			default:
			break;
		}
	}
}
 344:	28 96       	adiw	r28, 0x08	; 8
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <ParseData>:
// 
 	return u8Devadrr;
}

void ParseData(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	uint16_t u16Word = uart_getc();	
 35a:	0e 94 8c 02 	call	0x518	; 0x518 <uart_getc>
	if((u16Word & 0xFF00) == 0)
 35e:	9c 01       	movw	r18, r24
 360:	22 27       	eor	r18, r18
 362:	23 2b       	or	r18, r19
 364:	09 f0       	breq	.+2      	; 0x368 <ParseData+0x12>
 366:	61 c0       	rjmp	.+194    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		uint8_t u8Byte = u16Word & 0x00FF;
		static uint8_t u8PayloadIdx;
		static uint8_t u8PayloadLen;
		
		switch(eProtocolState)
 368:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <eProtocolState>
 36c:	4e 2f       	mov	r20, r30
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	47 30       	cpi	r20, 0x07	; 7
 372:	51 05       	cpc	r21, r1
 374:	08 f0       	brcs	.+2      	; 0x378 <ParseData+0x22>
 376:	59 c0       	rjmp	.+178    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 378:	fa 01       	movw	r30, r20
 37a:	e6 5d       	subi	r30, 0xD6	; 214
 37c:	ff 4f       	sbci	r31, 0xFF	; 255
 37e:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__tablejump2__>
		{
			//Idle state
			case eIdle:
			if (u8Byte == 0x5A)
 382:	8a 35       	cpi	r24, 0x5A	; 90
 384:	09 f0       	breq	.+2      	; 0x388 <ParseData+0x32>
 386:	51 c0       	rjmp	.+162    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				eProtocolState = eWaitSOF;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <eProtocolState>
 38e:	4d c0       	rjmp	.+154    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			break;
			
			case eWaitSOF:
			if(u8Byte==0xA5)
 390:	85 3a       	cpi	r24, 0xA5	; 165
 392:	21 f4       	brne	.+8      	; 0x39c <ParseData+0x46>
			{
				eProtocolState = eAdress;
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <eProtocolState>
 39a:	47 c0       	rjmp	.+142    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			else
			{
				eProtocolState  = eIdle;
 39c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <eProtocolState>
 3a0:	44 c0       	rjmp	.+136    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			break;
			
			case eAdress:
			sFrame.u8Addr = u8Byte;
 3a2:	ed eb       	ldi	r30, 0xBD	; 189
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 83       	st	Z, r24
			sFrame.u8RawData[0] = u8Byte;
 3a8:	84 8b       	std	Z+20, r24	; 0x14
			eProtocolState = eCmd;
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <eProtocolState>
			break;
 3b0:	3c c0       	rjmp	.+120    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			
			//sptawdzanie komend
			case eCmd:
			sFrame.u8Cmd = u8Byte;
 3b2:	ed eb       	ldi	r30, 0xBD	; 189
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	81 83       	std	Z+1, r24	; 0x01
			sFrame.u8RawData[1] = u8Byte;
 3b8:	85 8b       	std	Z+21, r24	; 0x15
			eProtocolState = ePayloadLen;
 3ba:	84 e0       	ldi	r24, 0x04	; 4
 3bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <eProtocolState>
			break;
 3c0:	34 c0       	rjmp	.+104    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			
			//okreslenie dlugosci ramki
			case ePayloadLen:
			sFrame.u8PayloadLen = u8Byte;
 3c2:	ed eb       	ldi	r30, 0xBD	; 189
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	82 83       	std	Z+2, r24	; 0x02
			sFrame.u8RawData[2] = u8Byte;
 3c8:	86 8b       	std	Z+22, r24	; 0x16
			
			if(u8Byte !=0)
 3ca:	88 23       	and	r24, r24
 3cc:	21 f0       	breq	.+8      	; 0x3d6 <ParseData+0x80>
			{
				eProtocolState = ePayload;
 3ce:	85 e0       	ldi	r24, 0x05	; 5
 3d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <eProtocolState>
 3d4:	2a c0       	rjmp	.+84     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			else
			{
				eProtocolState = eCRC;
 3d6:	86 e0       	ldi	r24, 0x06	; 6
 3d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <eProtocolState>
 3dc:	26 c0       	rjmp	.+76     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			break;
			
			case ePayload:
			sFrame.u8Payload[u8PayloadIdx] = u8Byte;
 3de:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <u8PayloadIdx.2190>
 3e2:	e9 2f       	mov	r30, r25
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	e3 54       	subi	r30, 0x43	; 67
 3e8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ea:	83 83       	std	Z+3, r24	; 0x03
			sFrame.u8RawData[3+u8PayloadIdx] = u8Byte;
 3ec:	87 8b       	std	Z+23, r24	; 0x17
			u8PayloadIdx++;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	89 0f       	add	r24, r25
 3f2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <u8PayloadIdx.2190>
			if(u8PayloadIdx == sFrame.u8PayloadLen)
 3f6:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <sFrame+0x2>
 3fa:	89 13       	cpse	r24, r25
 3fc:	16 c0       	rjmp	.+44     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			{
				eProtocolState = eCRC;
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <eProtocolState>
 404:	12 c0       	rjmp	.+36     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			}
			break;
			
			case eCRC:
			
			sFrame.u8CRC = u8Byte;
 406:	cd eb       	ldi	r28, 0xBD	; 189
 408:	d0 e0       	ldi	r29, 0x00	; 0
 40a:	8b 8b       	std	Y+19, r24	; 0x13
			uint8_t u8CalcCRC = CalcCRC(sFrame.u8RawData,3+sFrame.u8PayloadLen);
 40c:	6a 81       	ldd	r22, Y+2	; 0x02
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	6d 5f       	subi	r22, 0xFD	; 253
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	81 ed       	ldi	r24, 0xD1	; 209
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 cf 00 	call	0x19e	; 0x19e <CalcCRC>
			if(u8CalcCRC == sFrame.u8CRC)
 41c:	9b 89       	ldd	r25, Y+19	; 0x13
 41e:	89 13       	cpse	r24, r25
 420:	02 c0       	rjmp	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			{
				ParseFrame();
 422:	0e 94 38 01 	call	0x270	; 0x270 <ParseFrame>
			}			
			eProtocolState = eIdle;
 426:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <eProtocolState>
			break;			
		}
	}
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <__vector_13>:
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);

}/* uart_puts */
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
 444:	8b b1       	in	r24, 0x0b	; 11
 446:	2c b1       	in	r18, 0x0c	; 12
 448:	8c 71       	andi	r24, 0x1C	; 28
 44a:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <UART_RxHead>
 44e:	ef 5f       	subi	r30, 0xFF	; 255
 450:	ef 71       	andi	r30, 0x1F	; 31
 452:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <UART_RxTail>
 456:	e9 17       	cp	r30, r25
 458:	39 f0       	breq	.+14     	; 0x468 <__vector_13+0x38>
 45a:	e0 93 79 00 	sts	0x0079, r30	; 0x800079 <UART_RxHead>
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	e4 58       	subi	r30, 0x84	; 132
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	20 83       	st	Z, r18
 466:	01 c0       	rjmp	.+2      	; 0x46a <__vector_13+0x3a>
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <UART_LastRxError>
 46e:	89 2b       	or	r24, r25
 470:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <UART_LastRxError>
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	2f 91       	pop	r18
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <__vector_14>:
 488:	1f 92       	push	r1
 48a:	0f 92       	push	r0
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	0f 92       	push	r0
 490:	11 24       	eor	r1, r1
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
 49a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <UART_TxHead>
 49e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <UART_TxTail>
 4a2:	98 17       	cp	r25, r24
 4a4:	61 f0       	breq	.+24     	; 0x4be <__vector_14+0x36>
 4a6:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <UART_TxTail>
 4aa:	ef 5f       	subi	r30, 0xFF	; 255
 4ac:	ef 71       	andi	r30, 0x1F	; 31
 4ae:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <UART_TxTail>
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	e4 56       	subi	r30, 0x64	; 100
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	80 81       	ld	r24, Z
 4ba:	8c b9       	out	0x0c, r24	; 12
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__vector_14+0x3a>
 4be:	56 9a       	sbi	0x0a, 6	; 10
 4c0:	55 98       	cbi	0x0a, 5	; 10
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	9f 91       	pop	r25
 4c8:	8f 91       	pop	r24
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__vector_15>:
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	56 98       	cbi	0x0a, 6	; 10
 4e0:	c0 98       	cbi	0x18, 0	; 24
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <uart_init>:
 4ec:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <UART_TxHead>
 4f0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <UART_TxTail>
 4f4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <UART_RxHead>
 4f8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <UART_RxTail>
 4fc:	99 23       	and	r25, r25
 4fe:	14 f4       	brge	.+4      	; 0x504 <uart_init+0x18>
 500:	22 e0       	ldi	r18, 0x02	; 2
 502:	2b b9       	out	0x0b, r18	; 11
 504:	90 78       	andi	r25, 0x80	; 128
 506:	90 bd       	out	0x20, r25	; 32
 508:	89 b9       	out	0x09, r24	; 9
 50a:	88 e9       	ldi	r24, 0x98	; 152
 50c:	8a b9       	out	0x0a, r24	; 10
 50e:	86 e8       	ldi	r24, 0x86	; 134
 510:	80 bd       	out	0x20, r24	; 32
 512:	b8 9a       	sbi	0x17, 0	; 23
 514:	c0 98       	cbi	0x18, 0	; 24
 516:	08 95       	ret

00000518 <uart_getc>:
 518:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <UART_RxHead>
 51c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <UART_RxTail>
 520:	98 17       	cp	r25, r24
 522:	a9 f0       	breq	.+42     	; 0x54e <uart_getc+0x36>
 524:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <UART_RxTail>
 528:	9f 5f       	subi	r25, 0xFF	; 255
 52a:	9f 71       	andi	r25, 0x1F	; 31
 52c:	e9 2f       	mov	r30, r25
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	e4 58       	subi	r30, 0x84	; 132
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	20 81       	ld	r18, Z
 536:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <UART_LastRxError>
 53a:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <UART_RxTail>
 53e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <UART_LastRxError>
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	98 2f       	mov	r25, r24
 546:	88 27       	eor	r24, r24
 548:	82 0f       	add	r24, r18
 54a:	91 1d       	adc	r25, r1
 54c:	08 95       	ret
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	08 95       	ret

00000554 <uart_putc>:
 554:	20 91 7b 00 	lds	r18, 0x007B	; 0x80007b <UART_TxHead>
 558:	2f 5f       	subi	r18, 0xFF	; 255
 55a:	2f 71       	andi	r18, 0x1F	; 31
 55c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <UART_TxTail>
 560:	29 17       	cp	r18, r25
 562:	e1 f3       	breq	.-8      	; 0x55c <uart_putc+0x8>
 564:	e2 2f       	mov	r30, r18
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	e4 56       	subi	r30, 0x64	; 100
 56a:	ff 4f       	sbci	r31, 0xFF	; 255
 56c:	80 83       	st	Z, r24
 56e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <UART_TxHead>
 572:	c0 9a       	sbi	0x18, 0	; 24
 574:	55 9a       	sbi	0x0a, 5	; 10
 576:	08 95       	ret

00000578 <uart_putdata>:

void uart_putdata(const uint8_t *d, const uint16_t l)
{
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
	for (uint16_t i = 0; i < l; i++)
 580:	61 15       	cp	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	51 f0       	breq	.+20     	; 0x59a <uart_putdata+0x22>
 586:	8c 01       	movw	r16, r24
 588:	ec 01       	movw	r28, r24
 58a:	06 0f       	add	r16, r22
 58c:	17 1f       	adc	r17, r23
		uart_putc(d[i]);		
 58e:	89 91       	ld	r24, Y+
 590:	0e 94 aa 02 	call	0x554	; 0x554 <uart_putc>

}/* uart_puts */

void uart_putdata(const uint8_t *d, const uint16_t l)
{
	for (uint16_t i = 0; i < l; i++)
 594:	c0 17       	cp	r28, r16
 596:	d1 07       	cpc	r29, r17
 598:	d1 f7       	brne	.-12     	; 0x58e <uart_putdata+0x16>
		uart_putc(d[i]);		
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <__tablejump2__>:
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	05 90       	lpm	r0, Z+
 5aa:	f4 91       	lpm	r31, Z
 5ac:	e0 2d       	mov	r30, r0
 5ae:	09 94       	ijmp

000005b0 <__itoa_ncheck>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	4a 30       	cpi	r20, 0x0A	; 10
 5b4:	31 f4       	brne	.+12     	; 0x5c2 <__itoa_ncheck+0x12>
 5b6:	99 23       	and	r25, r25
 5b8:	22 f4       	brpl	.+8      	; 0x5c2 <__itoa_ncheck+0x12>
 5ba:	bd e2       	ldi	r27, 0x2D	; 45
 5bc:	90 95       	com	r25
 5be:	81 95       	neg	r24
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__utoa_common>

000005c6 <__utoa_ncheck>:
 5c6:	bb 27       	eor	r27, r27

000005c8 <__utoa_common>:
 5c8:	fb 01       	movw	r30, r22
 5ca:	55 27       	eor	r21, r21
 5cc:	aa 27       	eor	r26, r26
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	aa 1f       	adc	r26, r26
 5d4:	a4 17       	cp	r26, r20
 5d6:	10 f0       	brcs	.+4      	; 0x5dc <__utoa_common+0x14>
 5d8:	a4 1b       	sub	r26, r20
 5da:	83 95       	inc	r24
 5dc:	50 51       	subi	r21, 0x10	; 16
 5de:	b9 f7       	brne	.-18     	; 0x5ce <__utoa_common+0x6>
 5e0:	a0 5d       	subi	r26, 0xD0	; 208
 5e2:	aa 33       	cpi	r26, 0x3A	; 58
 5e4:	08 f0       	brcs	.+2      	; 0x5e8 <__utoa_common+0x20>
 5e6:	a9 5d       	subi	r26, 0xD9	; 217
 5e8:	a1 93       	st	Z+, r26
 5ea:	00 97       	sbiw	r24, 0x00	; 0
 5ec:	79 f7       	brne	.-34     	; 0x5cc <__utoa_common+0x4>
 5ee:	b1 11       	cpse	r27, r1
 5f0:	b1 93       	st	Z+, r27
 5f2:	11 92       	st	Z+, r1
 5f4:	cb 01       	movw	r24, r22
 5f6:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <strrev>

000005fa <strrev>:
 5fa:	dc 01       	movw	r26, r24
 5fc:	fc 01       	movw	r30, r24
 5fe:	67 2f       	mov	r22, r23
 600:	71 91       	ld	r23, Z+
 602:	77 23       	and	r23, r23
 604:	e1 f7       	brne	.-8      	; 0x5fe <strrev+0x4>
 606:	32 97       	sbiw	r30, 0x02	; 2
 608:	04 c0       	rjmp	.+8      	; 0x612 <strrev+0x18>
 60a:	7c 91       	ld	r23, X
 60c:	6d 93       	st	X+, r22
 60e:	70 83       	st	Z, r23
 610:	62 91       	ld	r22, -Z
 612:	ae 17       	cp	r26, r30
 614:	bf 07       	cpc	r27, r31
 616:	c8 f3       	brcs	.-14     	; 0x60a <strrev+0x10>
 618:	08 95       	ret

0000061a <_exit>:
 61a:	f8 94       	cli

0000061c <__stop_program>:
 61c:	ff cf       	rjmp	.-2      	; 0x61c <__stop_program>
