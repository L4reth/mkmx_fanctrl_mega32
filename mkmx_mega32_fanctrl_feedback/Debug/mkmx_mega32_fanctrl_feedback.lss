
mkmx_mega32_fanctrl_feedback.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000772  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000772  00000806  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000079  0080006c  0080006c  00000812  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001504  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3d  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a57  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d2  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e02  00000000  00000000  00003d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_5>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_6>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_13>
  38:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__vector_14>
  3c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_15>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	f1 01       	movw	r30, r2
  56:	f8 01       	movw	r30, r16
  58:	01 02       	muls	r16, r17
  5a:	09 02       	muls	r16, r25
  5c:	11 02       	muls	r17, r17
  5e:	1f 02       	muls	r17, r31
  60:	33 02       	muls	r19, r19

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e2 e7       	ldi	r30, 0x72	; 114
  76:	f7 e0       	ldi	r31, 0x07	; 7
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	ac 36       	cpi	r26, 0x6C	; 108
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	ac e6       	ldi	r26, 0x6C	; 108
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a5 3e       	cpi	r26, 0xE5	; 229
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  98:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <__vector_6>:
//Seting Fan speed
volatile uint8_t u8SpeedAdjustFlag = 0;
volatile uint8_t u8Speed = 0;

ISR(TIMER1_CAPT_vect) //measuring speed interrupt
{							//done on every timer_1 overflow
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	u16CounterDiff = (TCNT1 - u16TmpDiff);
  b2:	8c b5       	in	r24, 0x2c	; 44
  b4:	9d b5       	in	r25, 0x2d	; 45
  b6:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <u16TmpDiff>
  ba:	30 91 76 00 	lds	r19, 0x0076	; 0x800076 <u16TmpDiff+0x1>
  be:	82 1b       	sub	r24, r18
  c0:	93 0b       	sbc	r25, r19
  c2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	u16TmpDiff = TCNT1;
  ca:	8c b5       	in	r24, 0x2c	; 44
  cc:	9d b5       	in	r25, 0x2d	; 45
  ce:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <u16TmpDiff+0x1>
  d2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <u16TmpDiff>
	
	TCCR1B ^= (1<<ICES1);
  d6:	9e b5       	in	r25, 0x2e	; 46
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	89 27       	eor	r24, r25
  dc:	8e bd       	out	0x2e, r24	; 46
	u8SpeedAdjustFlag = 1; //Allow to change Fan speed
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <u8SpeedAdjustFlag>
	
	if(u16CounterDiff > 700)
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  ec:	8d 3b       	cpi	r24, 0xBD	; 189
  ee:	92 40       	sbci	r25, 0x02	; 2
  f0:	40 f0       	brcs	.+16     	; 0x102 <__vector_6+0x62>
	{
		u16Period = u16CounterDiff;
  f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  f6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  fa:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <u16Period+0x1>
  fe:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <u16Period>
	}	
	u8ICPCounter++;
 102:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8ICPCounter>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <u8ICPCounter>
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_5>:

ISR(TIMER2_OVF_vect) //Detecting fan stop interrupt 
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
	u8IntCounter++;
 12a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <u8IntCounter>
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <u8IntCounter>
	if(u8IntCounter == 20) //additional prescaler 
 134:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <u8IntCounter>
 138:	84 31       	cpi	r24, 0x14	; 20
 13a:	71 f4       	brne	.+28     	; 0x158 <__vector_5+0x3a>
	{
		if(u8ICPCounter == 0)
 13c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8ICPCounter>
 140:	81 11       	cpse	r24, r1
 142:	04 c0       	rjmp	.+8      	; 0x14c <__vector_5+0x2e>
		{
			u8stopFlag = 1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <u8stopFlag>
 14a:	02 c0       	rjmp	.+4      	; 0x150 <__vector_5+0x32>
		}
		else
		u8stopFlag = 0;
 14c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <u8stopFlag>
		u8ICPCounter = 0;
 150:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <u8ICPCounter>
		
		//uart_putc(0x55); //debuging
		u8IntCounter = 0;
 154:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <u8IntCounter>
	}
}
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
    /* I/O ports settings */
		   //76543210 pin numbers 1-output
	DDRA = 0b00000000; //Dedicated for address pins
 164:	1a ba       	out	0x1a, r1	; 26
// 	DDRB = 0b
// 	DDRC = 0b
	DDRD |= (1<<DDD6); //input capture pin
 166:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1<<DDD5); //pwm output pin
 168:	8d 9a       	sbi	0x11, 5	; 17
	
	/* PWM module config */ //fast pwm, presc. =8
	TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<COM01)|	(1<<CS01);
 16a:	83 b7       	in	r24, 0x33	; 51
 16c:	8a 66       	ori	r24, 0x6A	; 106
 16e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0; //full speed
 170:	1c be       	out	0x3c, r1	; 60
	
	/* Input capture config */
	TCCR1A = 0x00;
 172:	1f bc       	out	0x2f, r1	; 47
	TCCR1B |= (1<<ICNC1)|(1<<ICES1)|(1<<CS12);
 174:	8e b5       	in	r24, 0x2e	; 46
 176:	84 6c       	ori	r24, 0xC4	; 196
 178:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<TICIE1);
 17a:	89 b7       	in	r24, 0x39	; 57
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	89 bf       	out	0x39, r24	; 57
	
	/* Stop detecting config */ //8 bitów zamiast 16!!!!!
	TCCR2 |= (1<<CS02)|(1<<CS01)|(1<<CS00); //free running, presc = 1024
 180:	85 b5       	in	r24, 0x25	; 37
 182:	87 60       	ori	r24, 0x07	; 7
 184:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<TOV2);										//overflow 30 per sec.
 186:	89 b7       	in	r24, 0x39	; 57
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	89 bf       	out	0x39, r24	; 57
	
	/* USART config */
	Protocolinit();
 18c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <Protocolinit>
	
	/* Enabling global interrupts */
	sei();
 190:	78 94       	sei
	
	/* Infinite loop */
    while (1) 
    {
		u16LastRPM = SpeedRetrun(u16Period, u8stopFlag);
		if(u8SpeedAdjustFlag = 1)
 192:	11 e0       	ldi	r17, 0x01	; 1
		{
			PID(u8Speed,u16LastRPM);
			u8SpeedAdjustFlag = 0; //wait for next interrupt
		}
		u16LastRPM = 1956;
 194:	c4 ea       	ldi	r28, 0xA4	; 164
 196:	d7 e0       	ldi	r29, 0x07	; 7
	sei();
	
	/* Infinite loop */
    while (1) 
    {
		u16LastRPM = SpeedRetrun(u16Period, u8stopFlag);
 198:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <u8stopFlag>
 19c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <u16Period>
 1a0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <u16Period+0x1>
 1a4:	0e 94 67 02 	call	0x4ce	; 0x4ce <SpeedRetrun>
 1a8:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <u16LastRPM+0x1>
 1ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <u16LastRPM>
		if(u8SpeedAdjustFlag = 1)
 1b0:	10 93 6d 00 	sts	0x006D, r17	; 0x80006d <u8SpeedAdjustFlag>
		{
			PID(u8Speed,u16LastRPM);
 1b4:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <u16LastRPM>
 1b8:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <u16LastRPM+0x1>
 1bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 50 02 	call	0x4a0	; 0x4a0 <PID>
			u8SpeedAdjustFlag = 0; //wait for next interrupt
 1c6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <u8SpeedAdjustFlag>
		}
		u16LastRPM = 1956;
 1ca:	d0 93 6f 00 	sts	0x006F, r29	; 0x80006f <u16LastRPM+0x1>
 1ce:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <u16LastRPM>
		ParseData();		
 1d2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <ParseData>
 1d6:	e0 cf       	rjmp	.-64     	; 0x198 <main+0x34>

000001d8 <CalcCRC>:
		}
	}
}

void blink(void) //debug diode on pin PA5
{
 1d8:	fc 01       	movw	r30, r24
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	b9 f0       	breq	.+46     	; 0x20e <CalcCRC+0x36>
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	df 01       	movw	r26, r30
 1ea:	a2 0f       	add	r26, r18
 1ec:	b3 1f       	adc	r27, r19
 1ee:	9c 91       	ld	r25, X
 1f0:	89 27       	eor	r24, r25
 1f2:	98 e0       	ldi	r25, 0x08	; 8
 1f4:	27 e0       	ldi	r18, 0x07	; 7
 1f6:	88 0f       	add	r24, r24
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <CalcCRC+0x24>
 1fa:	82 27       	eor	r24, r18
 1fc:	9a 95       	dec	r25
 1fe:	d9 f7       	brne	.-10     	; 0x1f6 <CalcCRC+0x1e>
 200:	4f 5f       	subi	r20, 0xFF	; 255
 202:	24 2f       	mov	r18, r20
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	26 17       	cp	r18, r22
 208:	37 07       	cpc	r19, r23
 20a:	70 f3       	brcs	.-36     	; 0x1e8 <CalcCRC+0x10>
 20c:	08 95       	ret
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret

00000212 <SendData>:
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	66 97       	sbiw	r28, 0x16	; 22
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	89 01       	movw	r16, r18
 22c:	9a e5       	ldi	r25, 0x5A	; 90
 22e:	99 83       	std	Y+1, r25	; 0x01
 230:	95 ea       	ldi	r25, 0xA5	; 165
 232:	9a 83       	std	Y+2, r25	; 0x02
 234:	8b 83       	std	Y+3, r24	; 0x03
 236:	6c 83       	std	Y+4, r22	; 0x04
 238:	2d 83       	std	Y+5, r18	; 0x05
 23a:	23 2b       	or	r18, r19
 23c:	a1 f0       	breq	.+40     	; 0x266 <SendData+0x54>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	e6 e0       	ldi	r30, 0x06	; 6
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e2 0f       	add	r30, r18
 24e:	f1 1d       	adc	r31, r1
 250:	da 01       	movw	r26, r20
 252:	a8 0f       	add	r26, r24
 254:	b9 1f       	adc	r27, r25
 256:	8c 91       	ld	r24, X
 258:	80 83       	st	Z, r24
 25a:	2f 5f       	subi	r18, 0xFF	; 255
 25c:	82 2f       	mov	r24, r18
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 17       	cp	r24, r16
 262:	91 07       	cpc	r25, r17
 264:	78 f3       	brcs	.-34     	; 0x244 <SendData+0x32>
 266:	b8 01       	movw	r22, r16
 268:	6d 5f       	subi	r22, 0xFD	; 253
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	ce 01       	movw	r24, r28
 26e:	03 96       	adiw	r24, 0x03	; 3
 270:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <CalcCRC>
 274:	fe 01       	movw	r30, r28
 276:	e0 0f       	add	r30, r16
 278:	f1 1f       	adc	r31, r17
 27a:	86 83       	std	Z+6, r24	; 0x06
 27c:	b8 01       	movw	r22, r16
 27e:	6a 5f       	subi	r22, 0xFA	; 250
 280:	7f 4f       	sbci	r23, 0xFF	; 255
 282:	ce 01       	movw	r24, r28
 284:	01 96       	adiw	r24, 0x01	; 1
 286:	0e 94 25 03 	call	0x64a	; 0x64a <uart_putdata>
 28a:	66 96       	adiw	r28, 0x16	; 22
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <Protocolinit>:
 2a0:	87 e6       	ldi	r24, 0x67	; 103
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 df 02 	call	0x5be	; 0x5be <uart_init>
 2a8:	08 95       	ret

000002aa <ParseFrame>:
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	28 97       	sbiw	r28, 0x08	; 8
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <sFrame>
 2c2:	8a 30       	cpi	r24, 0x0A	; 10
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <ParseFrame+0x1e>
 2c6:	6e c0       	rjmp	.+220    	; 0x3a4 <ParseFrame+0xfa>
 2c8:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <sFrame+0x1>
 2cc:	83 30       	cpi	r24, 0x03	; 3
 2ce:	21 f1       	breq	.+72     	; 0x318 <ParseFrame+0x6e>
 2d0:	28 f4       	brcc	.+10     	; 0x2dc <ParseFrame+0x32>
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	59 f0       	breq	.+22     	; 0x2ec <ParseFrame+0x42>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	d1 f0       	breq	.+52     	; 0x30e <ParseFrame+0x64>
 2da:	64 c0       	rjmp	.+200    	; 0x3a4 <ParseFrame+0xfa>
 2dc:	85 30       	cpi	r24, 0x05	; 5
 2de:	09 f4       	brne	.+2      	; 0x2e2 <ParseFrame+0x38>
 2e0:	43 c0       	rjmp	.+134    	; 0x368 <ParseFrame+0xbe>
 2e2:	70 f1       	brcs	.+92     	; 0x340 <ParseFrame+0x96>
 2e4:	86 30       	cpi	r24, 0x06	; 6
 2e6:	09 f4       	brne	.+2      	; 0x2ea <ParseFrame+0x40>
 2e8:	4b c0       	rjmp	.+150    	; 0x380 <ParseFrame+0xd6>
 2ea:	5c c0       	rjmp	.+184    	; 0x3a4 <ParseFrame+0xfa>
 2ec:	84 e4       	ldi	r24, 0x44	; 68
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	1a 82       	std	Y+2, r1	; 0x02
 2f2:	85 e5       	ldi	r24, 0x55	; 85
 2f4:	8b 83       	std	Y+3, r24	; 0x03
 2f6:	86 e6       	ldi	r24, 0x66	; 102
 2f8:	8c 83       	std	Y+4, r24	; 0x04
 2fa:	28 e0       	ldi	r18, 0x08	; 8
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	ae 01       	movw	r20, r28
 300:	4f 5f       	subi	r20, 0xFF	; 255
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	64 e7       	ldi	r22, 0x74	; 116
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	0e 94 09 01 	call	0x212	; 0x212 <SendData>
 30c:	4b c0       	rjmp	.+150    	; 0x3a4 <ParseFrame+0xfa>
 30e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <sFrame+0x3>
 312:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 316:	46 c0       	rjmp	.+140    	; 0x3a4 <ParseFrame+0xfa>
 318:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u16LastRPM>
 31c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <u16LastRPM+0x1>
 320:	99 83       	std	Y+1, r25	; 0x01
 322:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u16LastRPM>
 326:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <u16LastRPM+0x1>
 32a:	8a 83       	std	Y+2, r24	; 0x02
 32c:	22 e0       	ldi	r18, 0x02	; 2
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	ae 01       	movw	r20, r28
 332:	4f 5f       	subi	r20, 0xFF	; 255
 334:	5f 4f       	sbci	r21, 0xFF	; 255
 336:	64 e7       	ldi	r22, 0x74	; 116
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 09 01 	call	0x212	; 0x212 <SendData>
 33e:	32 c0       	rjmp	.+100    	; 0x3a4 <ParseFrame+0xfa>
 340:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u16LastRPM>
 344:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <u16LastRPM+0x1>
 348:	4a e0       	ldi	r20, 0x0A	; 10
 34a:	be 01       	movw	r22, r28
 34c:	6f 5f       	subi	r22, 0xFF	; 255
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	0e 94 82 03 	call	0x704	; 0x704 <__itoa_ncheck>
 354:	25 e0       	ldi	r18, 0x05	; 5
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	ae 01       	movw	r20, r28
 35a:	4f 5f       	subi	r20, 0xFF	; 255
 35c:	5f 4f       	sbci	r21, 0xFF	; 255
 35e:	64 e7       	ldi	r22, 0x74	; 116
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 09 01 	call	0x212	; 0x212 <SendData>
 366:	1e c0       	rjmp	.+60     	; 0x3a4 <ParseFrame+0xfa>
 368:	8c b7       	in	r24, 0x3c	; 60
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	21 e0       	ldi	r18, 0x01	; 1
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	ae 01       	movw	r20, r28
 372:	4f 5f       	subi	r20, 0xFF	; 255
 374:	5f 4f       	sbci	r21, 0xFF	; 255
 376:	64 e7       	ldi	r22, 0x74	; 116
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 09 01 	call	0x212	; 0x212 <SendData>
 37e:	12 c0       	rjmp	.+36     	; 0x3a4 <ParseFrame+0xfa>
 380:	88 e0       	ldi	r24, 0x08	; 8
 382:	e2 e6       	ldi	r30, 0x62	; 98
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	de 01       	movw	r26, r28
 388:	11 96       	adiw	r26, 0x01	; 1
 38a:	01 90       	ld	r0, Z+
 38c:	0d 92       	st	X+, r0
 38e:	8a 95       	dec	r24
 390:	e1 f7       	brne	.-8      	; 0x38a <ParseFrame+0xe0>
 392:	28 e0       	ldi	r18, 0x08	; 8
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	ae 01       	movw	r20, r28
 398:	4f 5f       	subi	r20, 0xFF	; 255
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	64 e7       	ldi	r22, 0x74	; 116
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 09 01 	call	0x212	; 0x212 <SendData>
 3a4:	28 96       	adiw	r28, 0x08	; 8
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <ParseData>:
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <uart_getc>
 3be:	9c 01       	movw	r18, r24
 3c0:	22 27       	eor	r18, r18
 3c2:	23 2b       	or	r18, r19
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <ParseData+0x12>
 3c6:	61 c0       	rjmp	.+194    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3c8:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <eProtocolState>
 3cc:	4e 2f       	mov	r20, r30
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	47 30       	cpi	r20, 0x07	; 7
 3d2:	51 05       	cpc	r21, r1
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <ParseData+0x22>
 3d6:	59 c0       	rjmp	.+178    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3d8:	fa 01       	movw	r30, r20
 3da:	e6 5d       	subi	r30, 0xD6	; 214
 3dc:	ff 4f       	sbci	r31, 0xFF	; 255
 3de:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <__tablejump2__>
 3e2:	8a 35       	cpi	r24, 0x5A	; 90
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <ParseData+0x32>
 3e6:	51 c0       	rjmp	.+162    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <eProtocolState>
 3ee:	4d c0       	rjmp	.+154    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3f0:	85 3a       	cpi	r24, 0xA5	; 165
 3f2:	21 f4       	brne	.+8      	; 0x3fc <ParseData+0x46>
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <eProtocolState>
 3fa:	47 c0       	rjmp	.+142    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 3fc:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <eProtocolState>
 400:	44 c0       	rjmp	.+136    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 402:	ee eb       	ldi	r30, 0xBE	; 190
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 83       	st	Z, r24
 408:	84 8b       	std	Z+20, r24	; 0x14
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <eProtocolState>
 410:	3c c0       	rjmp	.+120    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 412:	ee eb       	ldi	r30, 0xBE	; 190
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	81 83       	std	Z+1, r24	; 0x01
 418:	85 8b       	std	Z+21, r24	; 0x15
 41a:	84 e0       	ldi	r24, 0x04	; 4
 41c:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <eProtocolState>
 420:	34 c0       	rjmp	.+104    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 422:	ee eb       	ldi	r30, 0xBE	; 190
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	82 83       	std	Z+2, r24	; 0x02
 428:	86 8b       	std	Z+22, r24	; 0x16
 42a:	88 23       	and	r24, r24
 42c:	21 f0       	breq	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	85 e0       	ldi	r24, 0x05	; 5
 430:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <eProtocolState>
 434:	2a c0       	rjmp	.+84     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <eProtocolState>
 43c:	26 c0       	rjmp	.+76     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 43e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <u8PayloadIdx.2190>
 442:	e9 2f       	mov	r30, r25
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e2 54       	subi	r30, 0x42	; 66
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	83 83       	std	Z+3, r24	; 0x03
 44c:	87 8b       	std	Z+23, r24	; 0x17
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	89 0f       	add	r24, r25
 452:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <u8PayloadIdx.2190>
 456:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <sFrame+0x2>
 45a:	89 13       	cpse	r24, r25
 45c:	16 c0       	rjmp	.+44     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <eProtocolState>
 464:	12 c0       	rjmp	.+36     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 466:	ce eb       	ldi	r28, 0xBE	; 190
 468:	d0 e0       	ldi	r29, 0x00	; 0
 46a:	8b 8b       	std	Y+19, r24	; 0x13
 46c:	6a 81       	ldd	r22, Y+2	; 0x02
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	6d 5f       	subi	r22, 0xFD	; 253
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	82 ed       	ldi	r24, 0xD2	; 210
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <CalcCRC>
 47c:	9b 89       	ldd	r25, Y+19	; 0x13
 47e:	89 13       	cpse	r24, r25
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	0e 94 55 01 	call	0x2aa	; 0x2aa <ParseFrame>
 486:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <eProtocolState>
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <SpeedUp>:
//////
//////Fan control functions
//////
void SpeedUp(uint8_t value)
{
	OCR0 -= value;
 490:	9c b7       	in	r25, 0x3c	; 60
 492:	98 1b       	sub	r25, r24
 494:	9c bf       	out	0x3c, r25	; 60
 496:	08 95       	ret

00000498 <SpeedDown>:
}

void SpeedDown(uint8_t value)
{
	OCR0 += value;
 498:	9c b7       	in	r25, 0x3c	; 60
 49a:	89 0f       	add	r24, r25
 49c:	8c bf       	out	0x3c, r24	; 60
 49e:	08 95       	ret

000004a0 <PID>:
}

void PID(uint16_t u16ExpectedRPM, uint16_t u16RPM)
{
 4a0:	0f 93       	push	r16
 4a2:	1f 93       	push	r17
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	ec 01       	movw	r28, r24
 4aa:	8b 01       	movw	r16, r22
	if(u16RPM > u16ExpectedRPM)
 4ac:	86 17       	cp	r24, r22
 4ae:	97 07       	cpc	r25, r23
 4b0:	18 f4       	brcc	.+6      	; 0x4b8 <PID+0x18>
	SpeedDown(5);
 4b2:	85 e0       	ldi	r24, 0x05	; 5
 4b4:	0e 94 4c 02 	call	0x498	; 0x498 <SpeedDown>
	if(u16RPM < u16ExpectedRPM)
 4b8:	0c 17       	cp	r16, r28
 4ba:	1d 07       	cpc	r17, r29
 4bc:	18 f4       	brcc	.+6      	; 0x4c4 <PID+0x24>
	SpeedUp(5);
 4be:	85 e0       	ldi	r24, 0x05	; 5
 4c0:	0e 94 48 02 	call	0x490	; 0x490 <SpeedUp>
}
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	08 95       	ret

000004ce <SpeedRetrun>:

volatile uint16_t u16tempRPM = 0;

uint16_t SpeedRetrun(uint16_t u16RecivedPeriod, uint8_t u8Checkstop)
{
 4ce:	cf 93       	push	r28
 4d0:	c6 2f       	mov	r28, r22
	uint16_t u16CalculatedRPM;
	//u16CalculatedRPM = 248 * (250000 /u16period); //prescaler = 8
	//u16CalculatedRPM = 31 * (250000 / u16period); //prescaler = 64
	u16CalculatedRPM = 15 * (62500 / u16RecivedPeriod); //prescaler = 256 previous 31
 4d2:	9c 01       	movw	r18, r24
 4d4:	40 e0       	ldi	r20, 0x00	; 0
 4d6:	50 e0       	ldi	r21, 0x00	; 0
 4d8:	64 e2       	ldi	r22, 0x24	; 36
 4da:	74 ef       	ldi	r23, 0xF4	; 244
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__divmodsi4>
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
 4e6:	82 9f       	mul	r24, r18
 4e8:	b0 01       	movw	r22, r0
 4ea:	83 9f       	mul	r24, r19
 4ec:	70 0d       	add	r23, r0
 4ee:	11 24       	eor	r1, r1
	if (u8Checkstop == 1)
 4f0:	c1 30       	cpi	r28, 0x01	; 1
 4f2:	19 f0       	breq	.+6      	; 0x4fa <SpeedRetrun+0x2c>
	{
		return 0;
	}
	else
	return u16CalculatedRPM;
 4f4:	86 2f       	mov	r24, r22
 4f6:	97 2f       	mov	r25, r23
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <SpeedRetrun+0x30>
	//u16CalculatedRPM = 248 * (250000 /u16period); //prescaler = 8
	//u16CalculatedRPM = 31 * (250000 / u16period); //prescaler = 64
	u16CalculatedRPM = 15 * (62500 / u16RecivedPeriod); //prescaler = 256 previous 31
	if (u8Checkstop == 1)
	{
		return 0;
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	return u16CalculatedRPM;
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <__vector_13>:
void uart_puts(const char *s )
{
    while (*s) 
      uart_putc(*s++);

}/* uart_puts */
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
 516:	8b b1       	in	r24, 0x0b	; 11
 518:	2c b1       	in	r18, 0x0c	; 12
 51a:	8c 71       	andi	r24, 0x1C	; 28
 51c:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <UART_RxHead>
 520:	ef 5f       	subi	r30, 0xFF	; 255
 522:	ef 71       	andi	r30, 0x1F	; 31
 524:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <UART_RxTail>
 528:	e9 17       	cp	r30, r25
 52a:	39 f0       	breq	.+14     	; 0x53a <__vector_13+0x38>
 52c:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <UART_RxHead>
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	e3 58       	subi	r30, 0x83	; 131
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	20 83       	st	Z, r18
 538:	01 c0       	rjmp	.+2      	; 0x53c <__vector_13+0x3a>
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <UART_LastRxError>
 540:	89 2b       	or	r24, r25
 542:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <UART_LastRxError>
 546:	ff 91       	pop	r31
 548:	ef 91       	pop	r30
 54a:	9f 91       	pop	r25
 54c:	8f 91       	pop	r24
 54e:	2f 91       	pop	r18
 550:	0f 90       	pop	r0
 552:	0f be       	out	0x3f, r0	; 63
 554:	0f 90       	pop	r0
 556:	1f 90       	pop	r1
 558:	18 95       	reti

0000055a <__vector_14>:
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
 56c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <UART_TxHead>
 570:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <UART_TxTail>
 574:	98 17       	cp	r25, r24
 576:	61 f0       	breq	.+24     	; 0x590 <__vector_14+0x36>
 578:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <UART_TxTail>
 57c:	ef 5f       	subi	r30, 0xFF	; 255
 57e:	ef 71       	andi	r30, 0x1F	; 31
 580:	e0 93 7b 00 	sts	0x007B, r30	; 0x80007b <UART_TxTail>
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	e3 56       	subi	r30, 0x63	; 99
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	80 81       	ld	r24, Z
 58c:	8c b9       	out	0x0c, r24	; 12
 58e:	02 c0       	rjmp	.+4      	; 0x594 <__vector_14+0x3a>
 590:	56 9a       	sbi	0x0a, 6	; 10
 592:	55 98       	cbi	0x0a, 5	; 10
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	9f 91       	pop	r25
 59a:	8f 91       	pop	r24
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <__vector_15>:
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	56 98       	cbi	0x0a, 6	; 10
 5b2:	c0 98       	cbi	0x18, 0	; 24
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <uart_init>:
 5be:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <UART_TxHead>
 5c2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <UART_TxTail>
 5c6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <UART_RxHead>
 5ca:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <UART_RxTail>
 5ce:	99 23       	and	r25, r25
 5d0:	14 f4       	brge	.+4      	; 0x5d6 <uart_init+0x18>
 5d2:	22 e0       	ldi	r18, 0x02	; 2
 5d4:	2b b9       	out	0x0b, r18	; 11
 5d6:	90 78       	andi	r25, 0x80	; 128
 5d8:	90 bd       	out	0x20, r25	; 32
 5da:	89 b9       	out	0x09, r24	; 9
 5dc:	88 e9       	ldi	r24, 0x98	; 152
 5de:	8a b9       	out	0x0a, r24	; 10
 5e0:	86 e8       	ldi	r24, 0x86	; 134
 5e2:	80 bd       	out	0x20, r24	; 32
 5e4:	b8 9a       	sbi	0x17, 0	; 23
 5e6:	c0 98       	cbi	0x18, 0	; 24
 5e8:	08 95       	ret

000005ea <uart_getc>:
 5ea:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <UART_RxHead>
 5ee:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <UART_RxTail>
 5f2:	98 17       	cp	r25, r24
 5f4:	a9 f0       	breq	.+42     	; 0x620 <uart_getc+0x36>
 5f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <UART_RxTail>
 5fa:	9f 5f       	subi	r25, 0xFF	; 255
 5fc:	9f 71       	andi	r25, 0x1F	; 31
 5fe:	e9 2f       	mov	r30, r25
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	e3 58       	subi	r30, 0x83	; 131
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	20 81       	ld	r18, Z
 608:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <UART_LastRxError>
 60c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <UART_RxTail>
 610:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <UART_LastRxError>
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	98 2f       	mov	r25, r24
 618:	88 27       	eor	r24, r24
 61a:	82 0f       	add	r24, r18
 61c:	91 1d       	adc	r25, r1
 61e:	08 95       	ret
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	91 e0       	ldi	r25, 0x01	; 1
 624:	08 95       	ret

00000626 <uart_putc>:
 626:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <UART_TxHead>
 62a:	2f 5f       	subi	r18, 0xFF	; 255
 62c:	2f 71       	andi	r18, 0x1F	; 31
 62e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <UART_TxTail>
 632:	29 17       	cp	r18, r25
 634:	e1 f3       	breq	.-8      	; 0x62e <uart_putc+0x8>
 636:	e2 2f       	mov	r30, r18
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	e3 56       	subi	r30, 0x63	; 99
 63c:	ff 4f       	sbci	r31, 0xFF	; 255
 63e:	80 83       	st	Z, r24
 640:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <UART_TxHead>
 644:	c0 9a       	sbi	0x18, 0	; 24
 646:	55 9a       	sbi	0x0a, 5	; 10
 648:	08 95       	ret

0000064a <uart_putdata>:

void uart_putdata(const uint8_t *d, const uint16_t l)
{
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
	for (uint16_t i = 0; i < l; i++)
 652:	61 15       	cp	r22, r1
 654:	71 05       	cpc	r23, r1
 656:	51 f0       	breq	.+20     	; 0x66c <uart_putdata+0x22>
 658:	8c 01       	movw	r16, r24
 65a:	ec 01       	movw	r28, r24
 65c:	06 0f       	add	r16, r22
 65e:	17 1f       	adc	r17, r23
		uart_putc(d[i]);		
 660:	89 91       	ld	r24, Y+
 662:	0e 94 13 03 	call	0x626	; 0x626 <uart_putc>

}/* uart_puts */

void uart_putdata(const uint8_t *d, const uint16_t l)
{
	for (uint16_t i = 0; i < l; i++)
 666:	c0 17       	cp	r28, r16
 668:	d1 07       	cpc	r29, r17
 66a:	d1 f7       	brne	.-12     	; 0x660 <uart_putdata+0x16>
		uart_putc(d[i]);		
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	08 95       	ret

00000676 <__udivmodsi4>:
 676:	a1 e2       	ldi	r26, 0x21	; 33
 678:	1a 2e       	mov	r1, r26
 67a:	aa 1b       	sub	r26, r26
 67c:	bb 1b       	sub	r27, r27
 67e:	fd 01       	movw	r30, r26
 680:	0d c0       	rjmp	.+26     	; 0x69c <__udivmodsi4_ep>

00000682 <__udivmodsi4_loop>:
 682:	aa 1f       	adc	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	ee 1f       	adc	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	a2 17       	cp	r26, r18
 68c:	b3 07       	cpc	r27, r19
 68e:	e4 07       	cpc	r30, r20
 690:	f5 07       	cpc	r31, r21
 692:	20 f0       	brcs	.+8      	; 0x69c <__udivmodsi4_ep>
 694:	a2 1b       	sub	r26, r18
 696:	b3 0b       	sbc	r27, r19
 698:	e4 0b       	sbc	r30, r20
 69a:	f5 0b       	sbc	r31, r21

0000069c <__udivmodsi4_ep>:
 69c:	66 1f       	adc	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	1a 94       	dec	r1
 6a6:	69 f7       	brne	.-38     	; 0x682 <__udivmodsi4_loop>
 6a8:	60 95       	com	r22
 6aa:	70 95       	com	r23
 6ac:	80 95       	com	r24
 6ae:	90 95       	com	r25
 6b0:	9b 01       	movw	r18, r22
 6b2:	ac 01       	movw	r20, r24
 6b4:	bd 01       	movw	r22, r26
 6b6:	cf 01       	movw	r24, r30
 6b8:	08 95       	ret

000006ba <__divmodsi4>:
 6ba:	05 2e       	mov	r0, r21
 6bc:	97 fb       	bst	r25, 7
 6be:	1e f4       	brtc	.+6      	; 0x6c6 <__divmodsi4+0xc>
 6c0:	00 94       	com	r0
 6c2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__negsi2>
 6c6:	57 fd       	sbrc	r21, 7
 6c8:	07 d0       	rcall	.+14     	; 0x6d8 <__divmodsi4_neg2>
 6ca:	0e 94 3b 03 	call	0x676	; 0x676 <__udivmodsi4>
 6ce:	07 fc       	sbrc	r0, 7
 6d0:	03 d0       	rcall	.+6      	; 0x6d8 <__divmodsi4_neg2>
 6d2:	4e f4       	brtc	.+18     	; 0x6e6 <__divmodsi4_exit>
 6d4:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__negsi2>

000006d8 <__divmodsi4_neg2>:
 6d8:	50 95       	com	r21
 6da:	40 95       	com	r20
 6dc:	30 95       	com	r19
 6de:	21 95       	neg	r18
 6e0:	3f 4f       	sbci	r19, 0xFF	; 255
 6e2:	4f 4f       	sbci	r20, 0xFF	; 255
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255

000006e6 <__divmodsi4_exit>:
 6e6:	08 95       	ret

000006e8 <__negsi2>:
 6e8:	90 95       	com	r25
 6ea:	80 95       	com	r24
 6ec:	70 95       	com	r23
 6ee:	61 95       	neg	r22
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	08 95       	ret

000006f8 <__tablejump2__>:
 6f8:	ee 0f       	add	r30, r30
 6fa:	ff 1f       	adc	r31, r31
 6fc:	05 90       	lpm	r0, Z+
 6fe:	f4 91       	lpm	r31, Z
 700:	e0 2d       	mov	r30, r0
 702:	09 94       	ijmp

00000704 <__itoa_ncheck>:
 704:	bb 27       	eor	r27, r27
 706:	4a 30       	cpi	r20, 0x0A	; 10
 708:	31 f4       	brne	.+12     	; 0x716 <__itoa_ncheck+0x12>
 70a:	99 23       	and	r25, r25
 70c:	22 f4       	brpl	.+8      	; 0x716 <__itoa_ncheck+0x12>
 70e:	bd e2       	ldi	r27, 0x2D	; 45
 710:	90 95       	com	r25
 712:	81 95       	neg	r24
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__utoa_common>

0000071a <__utoa_ncheck>:
 71a:	bb 27       	eor	r27, r27

0000071c <__utoa_common>:
 71c:	fb 01       	movw	r30, r22
 71e:	55 27       	eor	r21, r21
 720:	aa 27       	eor	r26, r26
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	aa 1f       	adc	r26, r26
 728:	a4 17       	cp	r26, r20
 72a:	10 f0       	brcs	.+4      	; 0x730 <__utoa_common+0x14>
 72c:	a4 1b       	sub	r26, r20
 72e:	83 95       	inc	r24
 730:	50 51       	subi	r21, 0x10	; 16
 732:	b9 f7       	brne	.-18     	; 0x722 <__utoa_common+0x6>
 734:	a0 5d       	subi	r26, 0xD0	; 208
 736:	aa 33       	cpi	r26, 0x3A	; 58
 738:	08 f0       	brcs	.+2      	; 0x73c <__utoa_common+0x20>
 73a:	a9 5d       	subi	r26, 0xD9	; 217
 73c:	a1 93       	st	Z+, r26
 73e:	00 97       	sbiw	r24, 0x00	; 0
 740:	79 f7       	brne	.-34     	; 0x720 <__utoa_common+0x4>
 742:	b1 11       	cpse	r27, r1
 744:	b1 93       	st	Z+, r27
 746:	11 92       	st	Z+, r1
 748:	cb 01       	movw	r24, r22
 74a:	0c 94 a7 03 	jmp	0x74e	; 0x74e <strrev>

0000074e <strrev>:
 74e:	dc 01       	movw	r26, r24
 750:	fc 01       	movw	r30, r24
 752:	67 2f       	mov	r22, r23
 754:	71 91       	ld	r23, Z+
 756:	77 23       	and	r23, r23
 758:	e1 f7       	brne	.-8      	; 0x752 <strrev+0x4>
 75a:	32 97       	sbiw	r30, 0x02	; 2
 75c:	04 c0       	rjmp	.+8      	; 0x766 <strrev+0x18>
 75e:	7c 91       	ld	r23, X
 760:	6d 93       	st	X+, r22
 762:	70 83       	st	Z, r23
 764:	62 91       	ld	r22, -Z
 766:	ae 17       	cp	r26, r30
 768:	bf 07       	cpc	r27, r31
 76a:	c8 f3       	brcs	.-14     	; 0x75e <strrev+0x10>
 76c:	08 95       	ret

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
