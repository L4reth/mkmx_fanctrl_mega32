
mkmx_mega32_fanctrl_feedback.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000212  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  00800062  00800062  000002a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d8  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000666  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a4  00000000  00000000  000013e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004be  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000243a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_5>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_13>
  38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_14>
  3c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  8a:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_6>:
volatile uint8_t u8DeviceAdres = 0;

volatile uint8_t szybkosc = 0;

ISR(TIMER1_CAPT_vect) //measuring speed interrupt
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	u16CounterDiff = (TCNT1 - u16TmpDiff);
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	9d b5       	in	r25, 0x2d	; 45
  a8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <u16TmpDiff>
  ac:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <u16TmpDiff+0x1>
  b0:	82 1b       	sub	r24, r18
  b2:	93 0b       	sbc	r25, r19
  b4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	u16TmpDiff = TCNT1;
  bc:	8c b5       	in	r24, 0x2c	; 44
  be:	9d b5       	in	r25, 0x2d	; 45
  c0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <u16TmpDiff+0x1>
  c4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <u16TmpDiff>
	
	TCCR1B ^= (1<<ICES1);
  c8:	9e b5       	in	r25, 0x2e	; 46
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	89 27       	eor	r24, r25
  ce:	8e bd       	out	0x2e, r24	; 46
	
	if(u16CounterDiff > 700)
  d0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  d4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  d8:	8d 3b       	cpi	r24, 0xBD	; 189
  da:	92 40       	sbci	r25, 0x02	; 2
  dc:	40 f0       	brcs	.+16     	; 0xee <__vector_6+0x5c>
	{
		u16Period = u16CounterDiff;
  de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  e2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  e6:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <u16Period+0x1>
  ea:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <u16Period>
	}
	
	u16ICPCounter++;
  ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  f2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_5>:

ISR(TIMER2_OVF_vect) //Detecting fan stop interrupt 
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
	if(u16ICPCounter == 0)
 120:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 124:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 128:	89 2b       	or	r24, r25
 12a:	21 f4       	brne	.+8      	; 0x134 <__vector_5+0x22>
	{
		u8stopFlag = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <u8stopFlag>
 132:	02 c0       	rjmp	.+4      	; 0x138 <__vector_5+0x26>
	}
	else
	u8stopFlag = 0;
 134:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u8stopFlag>
	u16ICPCounter = 0;
 138:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 13c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <main>:
	/* Stop detecting config */ //8 bitów zamiast 16!!!!!
	
	/* USART config */
	
	/* Enabling global interrupts */
	sei();
 14e:	78 94       	sei
 150:	ff cf       	rjmp	.-2      	; 0x150 <main+0x2>

00000152 <__vector_13>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 166:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
 168:	2c b1       	in	r18, 0x0c	; 12
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
 16a:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 16c:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <UART_RxHead>
 170:	ef 5f       	subi	r30, 0xFF	; 255
 172:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 174:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <UART_RxTail>
 178:	e9 17       	cp	r30, r25
 17a:	39 f0       	breq	.+14     	; 0x18a <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 17c:	e0 93 6b 00 	sts	0x006B, r30	; 0x80006b <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e2 59       	subi	r30, 0x92	; 146
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	20 83       	st	Z, r18
 188:	01 c0       	rjmp	.+2      	; 0x18c <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 18a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 18c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <UART_LastRxError>
 190:	89 2b       	or	r24, r25
 192:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <UART_LastRxError>
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <__vector_14>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
    unsigned char tmptail;

    if ( UART_TxHead != UART_TxTail) {
 1bc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <UART_TxHead>
 1c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <UART_TxTail>
 1c4:	98 17       	cp	r25, r24
 1c6:	61 f0       	breq	.+24     	; 0x1e0 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1c8:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <UART_TxTail>
 1cc:	ef 5f       	subi	r30, 0xFF	; 255
 1ce:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 1d0:	e0 93 6c 00 	sts	0x006C, r30	; 0x80006c <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	e2 57       	subi	r30, 0x72	; 114
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	80 81       	ld	r24, Z
 1dc:	8c b9       	out	0x0c, r24	; 12
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <__vector_14+0x3a>
    } else {
	    /* tx buffer empty, disable UDRE interrupt, enable TXC interrupt*/
		UART0_CONTROL |= _BV(UART0_TXCIE);
 1e0:	56 9a       	sbi	0x0a, 6	; 10
	    UART0_CONTROL &= ~_BV(UART0_UDRIE);
 1e2:	55 98       	cbi	0x0a, 5	; 10
    }
}
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_15>:

ISR (UART0_TRANSMIT_ENDED)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
	UART0_CONTROL &= ~_BV(UART0_TXCIE);
 200:	56 98       	cbi	0x0a, 6	; 10

	I_WILL_BE_RECEIVING;
 202:	c0 98       	cbi	0x18, 0	; 24
}
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
